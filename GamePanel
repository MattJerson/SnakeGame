package test;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
public class Snek extends JPanel implements Runnable, KeyListener {
public static final int WIDTH = 500, HEIGHT = 500;
private Thread thread;
private boolean running;
private boolean right = true, left = false, up = false, down = false; 
private BodyPart b;
private ArrayList<BodyPart> snek;
private Apple apple;
private ArrayList<Apple> apples;
private Random r;
private int xCoor = 10, yCoor = 10, size = 15;
private int ticks = 0;
public Snek(){
setFocusable(true);
setPreferredSize(new Dimension(WIDTH, HEIGHT));
addKeyListener(this);
snek = new ArrayList<BodyPart>();
apples = new ArrayList<Apple>();
r = new Random ();
start();
}
public void start(){   
running = true;
thread = new Thread(this);
thread.start();
}
public void stop(){
running = false;
try {
thread.join();
} catch (InterruptedException ex) {
Logger.getLogger(Snek.class.getName()).log(Level.SEVERE, null, ex);
}
}
public void tick(){   
if(snek.size() ==0){
b = new BodyPart(xCoor, yCoor, 10);
snek.add(b);
}    
ticks++;
if(ticks > 250000){
if(right) xCoor++;
if(left) xCoor--;
if(up) yCoor--;
if(down) yCoor++;
ticks = 0;
b = new BodyPart(xCoor, yCoor, 10);
snek.add(b);
if(snek.size() > size){
snek.remove(0);
}
}
if(apples.size() ==0){
int xCoor = r.nextInt(49);
int yCoor = r.nextInt(49);
apple = new Apple(xCoor, yCoor, 10);
apples.add(apple);
}
for(int i = 0 ; i < apples.size(); i++){
if(xCoor == apples.get(i).getxCoor() && yCoor == apples.get(i).getyCoor()){
size++;
apples.remove(i);
i++;
}
}
for(int i = 0 ; i <snek.size() ; i++){    
if(xCoor == snek.get(i).getxCoor() && yCoor == snek.get(i).getyCoor()){
if(i !=snek.size()- 1){
System.out.println("Game Over");
stop();
}
}
}
if(xCoor < 0 || xCoor> 49 || yCoor < 0 || yCoor > 49){
System.out.println("Game Over");
stop();
}
}
public void paint(Graphics g){    
g.clearRect(0, 0, WIDTH, HEIGHT);
g.setColor(Color.BLACK);
g.fillRect(0, 0, WIDTH, HEIGHT);
for(int i = 0 ; i < WIDTH/10 ; i++){
g.drawLine(i * 10, 0, i * 10, HEIGHT);
}
for(int i = 0 ; i < HEIGHT/10 ; i++){
g.drawLine(0, i * 10, HEIGHT, i * 10);
}
for(int i = 0 ; i < snek.size() ; i++){
snek.get(i).draw(g);
}
for(int i = 0 ; i < apples.size(); i++){
apples.get(i).draw(g);
}
}
@Override
public void run() {
while(running) {
tick();
repaint();
}     
}
public void keyTyped(KeyEvent args0) {
}
@Override
public void keyPressed(KeyEvent e) {
    int key = e.getKeyCode();
if(key == KeyEvent.VK_RIGHT && !left){
right = true;
up = false;
down = false;
}
if(key == KeyEvent.VK_LEFT && !right){
left = true;
up = false;
down = false;
}
if(key == KeyEvent.VK_UP && !down){
up = true;
left = false;
right = false;
}
if(key == KeyEvent.VK_DOWN && !up){
left = false;
right = false;
down = true;
}
}
public void keyReleased(KeyEvent args0) {      
}
}
